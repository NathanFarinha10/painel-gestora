import streamlit as st
import pandas as pd
import google.generativeai as genai
import PyPDF2
from io import BytesIO
import datetime

# --- CONFIGURA√á√ÉO INICIAL ---
st.set_page_config(
    page_title="Market Intelligence Platform",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- CHAVE DA API ---
# Para o deploy no Streamlit Cloud, adicione a chave como um "Secret"
# st.secrets['GEMINI_API_KEY']
try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
    genai.configure(api_key=GEMINI_API_KEY)
except FileNotFoundError:
    # Este bloco √© para rodar localmente, caso voc√™ crie um arquivo secrets.toml
    st.warning("Arquivo de secrets n√£o encontrado. Crie um arquivo .streamlit/secrets.toml para desenvolvimento local.")
    st.stop()
except KeyError:
    st.error("Chave da API do Gemini n√£o encontrada. Configure o 'GEMINI_API_KEY' nos Secrets do Streamlit Cloud.")
    st.stop()


# --- FUN√á√ïES CORE ---

def extrair_texto_pdf(arquivo_pdf):
    """Extrai texto de um arquivo PDF carregado pelo Streamlit."""
    texto_completo = ""
    leitor_pdf = PyPDF2.PdfReader(BytesIO(arquivo_pdf.read()))
    for pagina in leitor_pdf.pages:
        texto_completo += pagina.extract_text()
    return texto_completo

def extrair_dados_com_ia(texto_pdf):
    """Envia o texto para a API do Gemini e pede para extrair as informa√ß√µes."""
    model = genai.GenerativeModel('gemini-1.5-flash')
    
    prompt = """
    Voc√™ √© um analista de investimentos s√™nior. Sua tarefa √© analisar o texto de um relat√≥rio de mercado e extrair as principais vis√µes de investimento da gestora.
    Para cada vis√£o que identificar, retorne a informa√ß√£o em um formato de lista de dicion√°rios Python.
    Siga estritamente esta estrutura para cada dicion√°rio:
    {"nome_gestora": "Nome da Gestora", "pais_regiao": "Pa√≠s ou Regi√£o analisada", "classe_ativo": "Classe de Ativo principal", "subclasse_ativo": "Se mencionado, a Subclasse do ativo", "visao_sentimento": "Otimista, Neutro ou Pessimista", "tese_principal": "A cita√ß√£o ou resumo conciso que justifica a vis√£o"}
    
    Extraia m√∫ltiplas vis√µes se houver. Se uma informa√ß√£o como 'subclasse_ativo' n√£o for encontrada, retorne um campo vazio.
    O texto para an√°lise √© o seguinte:
    ---
    {}
    ---
    """.format(texto_pdf)
    
    try:
        response = model.generate_content(prompt)
        # O Gemini pode retornar o texto formatado como markdown, ent√£o precisamos limp√°-lo.
        clean_response = response.text.strip().replace("```python", "").replace("```", "").strip()
        # Converte a string da resposta em uma lista de dicion√°rios Python real
        dados_extraidos = eval(clean_response)
        return dados_extraidos
    except Exception as e:
        st.error(f"Erro ao chamar a API do Gemini: {e}")
        st.error(f"Resposta recebida: {response.text}")
        return None

# --- NAVEGA√á√ÉO E P√ÅGINAS ---

st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio("Escolha uma p√°gina", ["Macro View", "Assets View", "Admin: Upload de Relat√≥rios"])

# Carregar o banco de dados
try:
    df = pd.read_csv("market_intelligence_db.csv")
except FileNotFoundError:
    st.sidebar.error("Arquivo 'market_intelligence_db.csv' n√£o encontrado. Crie-o no reposit√≥rio.")
    st.stop()

if pagina == "Macro View":
    st.title("üåé Macro View - An√°lise por Pa√≠s/Regi√£o")

    paises = df['pais_regiao'].dropna().unique()
    pais_selecionado = st.selectbox("Selecione uma Regi√£o", sorted(paises))

    if pais_selecionado:
        df_filtrado = df[df['pais_regiao'] == pais_selecionado]
        st.subheader(f"Vis√µes para {pais_selecionado}")

        if df_filtrado.empty:
            st.info("Nenhuma vis√£o encontrada para esta regi√£o.")
        else:
            for index, row in df_filtrado.iterrows():
                with st.container(border=True):
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.markdown(f"**Gestora:** {row['nome_gestora']}")
                        st.markdown(f"**Ativo:** {row['classe_ativo']} ({row.get('subclasse_ativo', 'N/A')})")
                        st.info(f"**Tese:** {row['tese_principal']}")
                    with col2:
                        sentimento = row['visao_sentimento']
                        if sentimento == 'Otimista':
                            st.success(f"**Vis√£o: {sentimento}**")
                        elif sentimento == 'Pessimista':
                            st.error(f"**Vis√£o: {sentimento}**")
                        else:
                            st.warning(f"**Vis√£o: {sentimento}**")
                        st.caption(f"Fonte: {row['fonte_documento']}")


elif pagina == "Assets View":
    st.title("üìä Assets View - An√°lise por Classe de Ativo")
    
    classes = df['classe_ativo'].dropna().unique()
    classe_selecionada = st.selectbox("Selecione uma Classe de Ativo", sorted(classes))

    if classe_selecionada:
        df_filtrado = df[df['classe_ativo'] == classe_selecionada]
        st.subheader(f"Vis√µes para {classe_selecionada}")

        if df_filtrado.empty:
            st.info("Nenhuma vis√£o encontrada para esta classe de ativo.")
        else:
            for index, row in df_filtrado.iterrows():
                 with st.container(border=True):
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.markdown(f"**Gestora:** {row['nome_gestora']}")
                        st.markdown(f"**Regi√£o:** {row['pais_regiao']}")
                        st.info(f"**Tese:** {row['tese_principal']}")
                    with col2:
                        sentimento = row['visao_sentimento']
                        if sentimento == 'Otimista':
                            st.success(f"**Vis√£o: {sentimento}**")
                        elif sentimento == 'Pessimista':
                            st.error(f"**Vis√£o: {sentimento}**")
                        else:
                            st.warning(f"**Vis√£o: {sentimento}**")
                        st.caption(f"Fonte: {row['fonte_documento']}")


elif pagina == "Admin: Upload de Relat√≥rios":
    st.title("‚öôÔ∏è Admin: Upload e Processamento de Relat√≥rios")
    st.warning("Aten√ß√£o: A funcionalidade de salvar os dados extra√≠dos diretamente no GitHub ainda n√£o foi implementada. Por enquanto, esta p√°gina apenas exibe os dados extra√≠dos.")

    uploaded_file = st.file_uploader("Escolha um relat√≥rio em PDF", type="pdf")

    if uploaded_file is not None:
        if st.button("Processar Relat√≥rio com IA"):
            with st.spinner("Extraindo texto do PDF..."):
                texto_pdf = extrair_texto_pdf(uploaded_file)
                st.text_area("Texto Extra√≠do (primeiros 1000 caracteres)", texto_pdf[:1000] + "...", height=150)

            with st.spinner("Analisando com a IA do Gemini... Isso pode levar um momento."):
                dados_extraidos = extrair_dados_com_ia(texto_pdf)

            if dados_extraidos:
                st.success("Dados extra√≠dos com sucesso!")
                df_novos_dados = pd.DataFrame(dados_extraidos)
                
                # Adicionar colunas de metadados
                df_novos_dados['data_extracao'] = datetime.date.today().strftime("%Y-%m-%d")
                df_novos_dados['fonte_documento'] = uploaded_file.name
                
                # Para o futuro: aqui viria a l√≥gica para salvar no CSV do GitHub
                st.subheader("Pr√©-visualiza√ß√£o dos Dados para Salvar")
                st.dataframe(df_novos_dados)
                
                st.info("Para adicionar estes dados √† plataforma, copie-os e cole-os manualmente no arquivo 'market_intelligence_db.csv' no GitHub por enquanto.")
